// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz_platform.DAL.Data.Context;

#nullable disable

namespace Quiz_platform.DAL.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20250201213431_v01")]
    partial class v01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Quiz_platform.DAL.Data.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCorrect = true,
                            OptionText = "int x = 5;",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsCorrect = false,
                            OptionText = "x := 5;",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            IsCorrect = false,
                            OptionText = "declare x = 5;",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsCorrect = true,
                            OptionText = "0",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 5,
                            IsCorrect = false,
                            OptionText = "null",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 6,
                            IsCorrect = false,
                            OptionText = "undefined",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 7,
                            IsCorrect = true,
                            OptionText = "len()",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 8,
                            IsCorrect = false,
                            OptionText = "size()",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 9,
                            IsCorrect = false,
                            OptionText = "count()",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 10,
                            IsCorrect = true,
                            OptionText = "TRUNCATE",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 11,
                            IsCorrect = false,
                            OptionText = "DELETE",
                            QuestionId = 7
                        },
                        new
                        {
                            Id = 12,
                            IsCorrect = false,
                            OptionText = "DROP",
                            QuestionId = 7
                        });
                });

            modelBuilder.Entity("Quiz_platform.DAL.Data.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerType = "Choices",
                            QuestionText = "What is the correct syntax to declare a variable in C#?",
                            QuizId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerType = "Text",
                            QuestionText = "Explain the concept of polymorphism in C#.",
                            QuizId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerType = "Choices",
                            QuestionText = "What is the default value of an uninitialized int variable in Java?",
                            QuizId = 2
                        },
                        new
                        {
                            Id = 4,
                            AnswerType = "Text",
                            QuestionText = "Describe the differences between 'ArrayList' and 'LinkedList' in Java.",
                            QuizId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerType = "Choices",
                            QuestionText = "Which built-in function in Python is used to get the length of a list?",
                            QuizId = 3
                        },
                        new
                        {
                            Id = 6,
                            AnswerType = "Text",
                            QuestionText = "Explain the concept of list comprehensions in Python.",
                            QuizId = 3
                        },
                        new
                        {
                            Id = 7,
                            AnswerType = "choice",
                            QuestionText = "Which SQL command is used to remove all records from a table but keep the structure?",
                            QuizId = 4
                        },
                        new
                        {
                            Id = 8,
                            AnswerType = "Text",
                            QuestionText = "Explain the difference between INNER JOIN and LEFT JOIN in SQL.",
                            QuizId = 4
                        });
                });

            modelBuilder.Entity("Quiz_platform.DAL.Data.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test your knowledge of C# fundamentals, including syntax, data types, and OOP concepts",
                            Image = "Images\\Quizzes\\csharp.png",
                            Name = "C# Basics Quiz"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A quiz covering Java syntax, OOP concepts, and basic Java programming principles.",
                            Image = "Images\\Quizzes\\java.png",
                            Name = "Java Fundamentals"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A quiz covering Python syntax, data structures, and basic algorithms.",
                            Image = "Images\\Quizzes\\python.png",
                            Name = "Python for Beginners"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Check your knowledge on SQL queries, normalization, and database management.",
                            Image = "Images\\Quizzes\\sql.png",
                            Name = "SQL & Databases"
                        });
                });

            modelBuilder.Entity("Quiz_platform.DAL.Data.Models.Answer", b =>
                {
                    b.HasOne("Quiz_platform.DAL.Data.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quiz_platform.DAL.Data.Models.Question", b =>
                {
                    b.HasOne("Quiz_platform.DAL.Data.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Quiz_platform.DAL.Data.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Quiz_platform.DAL.Data.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
